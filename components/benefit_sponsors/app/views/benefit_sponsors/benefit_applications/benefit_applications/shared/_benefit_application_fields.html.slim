.alert.alert-info.hide role="alert"
  strong
    i.fa.fa-exclamation-triangle aria-hidden="true"
    = Settings.site.late_rates_message
h1.heading-text Add Benefit Package
.row.pl-1
  h3 When would you like your coverage to start? (In the next 2 months)
  h4.i.fas.fa-question-circle data-toggle='tooltip' title=plan_shop_coverage_tip_helper
.row#benefitApplicationform
  .col-md-12.p0
    - benefit_application_start_dates = f.object.start_on_options.keys
    - formatted_start_on = f.object.start_on.present? ? Date.strptime(f.object.start_on, "%m/%d/%Y") : nil
    .row.row-form-wrapper#uic-wrapper
      .col-md-6.col-sm-12
        = f.hidden_field :benefit_sponsorship_id
        = f.select :start_on, benefit_application_start_dates,{:prompt => "SELECT START ON", :selected => formatted_start_on}, class:'floatlabel benefit-application-start-date', onchange:'selectedDate(this)', id:'baStartDate', disabled: (f.object.is_renewing? || formatted_start_on.present?)
      .col-md-6.col-sm-12
        = f.text_field :end_on, class: "form-control", required: true, placeholder: 'END ON', readonly: true
.row.pl-1
  h3.mr-1 Select your open enrollment dates
  h4.i.fas.fa-question-circle data-toggle='tooltip' title=l10n("employers.plan_years.oe_tool_tip", site_short_name: site_short_name, contact_center_phone_number: contact_center_phone_number)
  .col-md-12.col-sm-12.col-xs-12.p0
    - oe_start_on = f.object.open_enrollment_start_on.present? ? Date.strptime(f.object.open_enrollment_start_on, "%m/%d/%Y") : nil
    - oe_end_on = f.object.open_enrollment_end_on.present? ? Date.strptime(f.object.open_enrollment_end_on, "%m/%d/%Y") : nil
    .row.row-form-wrapper#uic-wrapper
      - dates = f.object.start_on_options
      - if dates[formatted_start_on]
        - oe_min_date = dates[formatted_start_on][:open_enrollment_start_on]
        - oe_max_date = dates[formatted_start_on][:open_enrollment_end_on]
      - else
        - oe_min_date = f.object.open_enrollment_start_on
        - oe_max_date = f.object.open_enrollment_end_on
      .col-md-6.col-sm-12
        = f.text_field :open_enrollment_start_on, class: "form-control", required: true, placeholder: 'OPEN ENROLLMENT START DATE', onmouseover:"showDatepicker('benefit_application_open_enrollment_start_on')", onchange:"isValidDate(this)", :"data-date-min" => f.object.start_on ? (Date.strptime(f.object.start_on, "%m/%d/%Y") - 2.months) : "", "data-oe-start-date" => oe_start_on, "data-oe-min-Date" => oe_min_date
      .col-md-6.col-sm-12
        = f.text_field :open_enrollment_end_on, class: "form-control interaction-field-control-plan_year-open_enrollment_end_on", required: true, placeholder: 'OPEN ENROLLMENT END DATE', onmouseover:"showDatepicker('benefit_application_open_enrollment_end_on')", onchange:"isValidDate(this)", "data-oe-end-date" => oe_end_on, "data-oe-max-Date" => oe_max_date
.row.pl-1
  h3 Add the total number of employees in your workforce
  h4 = l10n("employers.plan_years.fte_text")
.row
  .col-md-12.col-sm-12.col-xs-12.p0
    .row.row-form-wrapper#uic-wrapper
      .col-md-4.col-sm-12
        label for="inputFTE" = l10n("employers.plan_years.fte_label")
        = f.text_field :fte_count, required: true, placeholder: '##', id:'fteEmployee', onchange:'checkEmployeeCount(this)'
      .col-md-4.col-sm-12
        label for="inputPTE" = l10n("employers.plan_years.pte_label")
        = f.text_field :pte_count, required: false, placeholder: '##', id:'pteEmployee'
      .col-md-4.col-sm-12
        label for="inputMSP" = l10n("employers.plan_years.msp_label")
        = f.text_field :msp_count, required: false, placeholder: '##', id:'medSecPayers'

#recommend_dates.hidden.mt-1
  = render "benefit_sponsors/benefit_applications/benefit_applications/recommend_dates"

javascript:

  var disableSelectric = false;
  var defaultOEStartOn = '';
  var defaultOEEndOn = '';

  function setDefaultDates() {
    defaultOEStartOn = document.querySelector("input#benefit_application_open_enrollment_start_on").value;
    defaultOEEndOn = document.querySelector("input#benefit_application_open_enrollment_end_on").value
  }

  function selectedDate(element) {
    showHideRecommendDates(element.value);
    setDefaultDates();
    checkEmployeeCount(element);
  }

  function setDueDates(id,newvalue) {
		document.getElementById(id).innerText = newvalue;
  }

  function resetInputOptions() {
    document.querySelector('input#benefit_application_end_on').value = '';
    document.querySelector("input#benefit_application_open_enrollment_start_on").value = '';
    document.querySelector("input#benefit_application_open_enrollment_end_on").value = '';
  }

  function showHideRecommendDates(date) {
    var recommendDates = document.querySelector('#recommend_dates');

    if (date) {
      recommendDates.classList.remove('hidden');
      assignBenefitApplicationDates(date)
    } else {
      recommendDates.classList.add('hidden');
      resetInputOptions()
    }
  }

  var monthName = ["Jan", "Feb", "Mar", "April", "May", "June",
    "July", "Aug", "Sept", "Oct", "Nov", "Dec"
  ];

  function assignBenefitApplicationDates(targetDate) {
    var date = JSON.parse('#{@benefit_application_form.start_on_options.to_json.html_safe}');
    var latest_submitted_on = date[targetDate]["employer_initial_application_latest_submit_on"];
    var binder_payment_deadline = date[targetDate]["binder_payment_due_date"];
    var submitByMonth = new Date(latest_submitted_on).getMonth()+1;
    var deadlineMonth = new Date(binder_payment_deadline).getMonth()+1;
    document.querySelector('input#benefit_application_end_on').value = getFormattedDate(date[targetDate]["benefit_application_end_on"]);
    document.querySelector("input#benefit_application_open_enrollment_start_on").value = getFormattedDate(date[targetDate]["open_enrollment_start_on"]);
    document.querySelector("input#benefit_application_open_enrollment_end_on").value = getFormattedDate(date[targetDate]["open_enrollment_end_on"]);
    setDueDates('benefit_application_latest_submitted_on_day', new Date(latest_submitted_on).getDate()+1);
    setDueDates('benefit_application_latest_submitted_on_month', monthName[submitByMonth-1]);
    setDueDates('binder_payment_deadline_day', new Date(binder_payment_deadline).getDate()+1);
    setDueDates('binder_payment_deadline_month', monthName[deadlineMonth-1]);
		dateOptions.oeStartOn = getFormattedDate(date[targetDate]["open_enrollment_start_on"]);
		dateOptions.oeEndOn = getFormattedDate(date[targetDate]["open_enrollment_end_on"]);
  }

  var employeeCounts = {
    fte: Number,
    pte: Number,
    msp: Number
  };

	var dateOptions = {
		oeStartOn:String,
		oeEndOn:String
	};

  function checkEmployeeCount(element) {
    setDefaultDates()
    if (element.id == "fteEmployee") {
      employeeCounts.fte = element.value
    }

    if (employeeCounts.fte >= 1 && defaultOEStartOn && defaultOEEndOn) {
      document.getElementById('benefitContinueBtn').disabled = false;
    } else {
      document.getElementById('benefitContinueBtn').disabled = true;
    }
  }

  function showDatepicker(id) {
    var open_enrollment_start_on = document.querySelector("input#benefit_application_open_enrollment_start_on");
    var minDate = $(open_enrollment_start_on).attr("data-oe-min-Date") || $(open_enrollment_end_on).attr("data-oe-start-date");
    var open_enrollment_end_on = document.querySelector("input#benefit_application_open_enrollment_end_on");
    var maxDate  = $(open_enrollment_end_on).attr("data-oe-max-Date") || $(open_enrollment_end_on).attr("data-oe-end-date");

    if (minDate) {
        initDatepicker(id, new Date(minDate), new Date(maxDate));
    } else {
        initDatepicker(id, new Date(defaultOEStartOn), new Date(defaultOEEndOn));
    }
  }
  // Temporary fix to Select your open enrollment dates row width and alignment
  (function() {
    var element = document.querySelectorAll('.col-md-12')[1].querySelector('#uic-wrapper');
    element.style.marginLeft = "10px"
    element.style.width = "98%"
    var element2 = document.querySelectorAll('.col-md-12')[2].querySelector('#uic-wrapper');
    element2.querySelectorAll('input').forEach(function(input) {
      input.style.height = "23px"
    })
  })();

  $('#baStartDate').change(function() {
    var date = $(this).val();
    plansForDate(date);
  })

  function plansForDate(date) {
    $.ajax({
      type: "GET",
      data:{
        start_on_date: date
      },
      success: function(res) {
        if (res != true) { // late rate scenario
          $('.alert-info').addClass('hide');
          $("#benefitContinueBtn").val("Continue");
        }else if (res == true) {
          $('.alert-info').removeClass('hide');
          $("#benefitContinueBtn").val("Save");
        }
      },
      url: "/benefit_sponsors/benefit_sponsorships/#{@benefit_application_form.benefit_sponsorship_id}/benefit_applications/late_rates_check"
    });
  }

  function isValidDate(element)
  {
    var oe_start_date = $("#benefit_application_open_enrollment_start_on").attr("data-oe-start-date")
    var oe_end_date = $("#benefit_application_open_enrollment_end_on").attr("data-oe-end-date")
    var date_regex = /^(0[1-9]|1[0-2])\/(0[1-9]|1\d|2\d|3[01])\/(19|20)\d{2}$/;
    if (!(date_regex.test(element.value)) && element.id == "benefit_application_open_enrollment_start_on") {
      alert('Invalid Date Format');
      element.value = oe_start_date;
    }
    else if (!(date_regex.test(element.value)) && element.id == "benefit_application_open_enrollment_end_on") {
      alert('Invalid Date Format');
      element.value = oe_end_date;
    }
  }